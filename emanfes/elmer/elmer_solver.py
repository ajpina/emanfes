#!/usr/bin/python
# -*- coding: iso-8859-15 -*-

# ==========================================================================
# Copyright (C) 2016 Dr. Alejandro Pina Ortega
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==========================================================================

"""
    Creates Elmer solver.
"""

# ==========================================================================
# Program:   emanfes-solver.py
# Author:    ajpina
# Date:      12/23/17
# Version:   0.1.1
#
# Revision History:
#      Date     Version  Author    Description
#  - 12/23/17:  0.1.1              Call Elmer Solver
#
# ==========================================================================

import subprocess

from emanfes.geogmsh import GeometryGmsh

class ElmerSolver:
    def __init__(self, analysis_settings, rotating_machine):
        self.gmsh_model = GeometryGmsh(analysis_settings, rotating_machine)

    def create(self):
        self.gmsh_model.create()

    def mesh(self):
        cmd_stator = ['ElmerGrid', '14', '2', 'stator.msh', '-2d', '-autoclean', '-names']
        cmd_rotor = ['ElmerGrid', '14', '2', 'rotor.msh', '-2d', '-autoclean', '-names']
        cmd_unite = ['ElmerGrid', '2', '2', 'stator', '-in', 'rotor', '-unite', '-autoclean', '-names', '-out', 'machine']
        process_stator = subprocess.Popen(cmd_stator, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = process_stator.communicate()
        process_stator.wait()
        if process_stator.returncode != 0:
            print(stdout)
            print(stderr)

        process_rotor = subprocess.Popen(cmd_rotor, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = process_rotor.communicate()
        process_rotor.wait()
        if process_rotor.returncode != 0:
            print(stdout)
            print(stderr)

        process_unite = subprocess.Popen(cmd_unite, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        (stdout, stderr) = process_unite.communicate()
        process_unite.wait()
        if process_unite.returncode != 0:
            print(stdout)
            print(stderr)

        boundaries = {}
        bodies = {}
        with open('machine/mesh.names', 'rt') as f:
            for line in f:
                fields = line.strip().split()
                if fields[0] == '$':
                    field_name = fields[1]
                    field_value = fields[3]
                    if field_name.count("BOUNDARY"):
                        boundaries[field_name] = field_value
                    else:
                        bodies[field_name] = field_value


        with open('emanfes_elmer.sif', 'wt') as fo:
            fo.write( "! File Generated by emanfes\n" )
            fo.write( "! bodies\n")
            for k, v in bodies.items():
                fo.write("Body {0}\n\tName = {1}\nEnd\n\n".format(v, k))

            fo.write("! boundaries\n")
            for k, v in boundaries.items():
                fo.write("Boundary Condition {0}\n\tName = {1}\nEnd\n\n".format(v, k))



    def solve(self):
        pass

    def post_processing(self):
        pass
